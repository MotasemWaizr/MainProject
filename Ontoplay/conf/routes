# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET / controllers.samples.Main.index()

# Module routes
GET /constraints/condition controllers.Constraints.condition(conditionId : Int, classUri: String)
GET /constraints/individual controllers.Constraints.individual(conditionId : Int, classUri: String)
GET /constraints/getValueCondition controllers.Constraints.getValueCondition(conditionId : Int, classUri: String, propertyUri : String, operator : String)
GET /constraints/getPropertyCondition controllers.Constraints.getPropertyCondition(conditionId: Integer, classUri: String, propertyUri: String)
GET /individuals/getPropertyCondition controllers.Individuals.getPropertyCondition(conditionId: Integer, classUri: String, propertyUri: String)



# Javascript routing
GET    /assets/javascripts/routes      controllers.Constraints.javascriptRoutes()





GET /remove/:individualName/:className	 controllers.samples.OntoPlay.remove(individualName: String, className: String)
GET /individual/:individualName	 controllers.samples.OntoPlay.individual(individualName: String)
GET /view/:className controllers.samples.OntoPlay.view(className : String)
GET /test/:className controllers.samples.OntoPlay.testAngular(className: String)

GET /sendOffer/:offerURI/:targetURI controllers.samples.OntoPlay.sendOffer(targetURI: String, offerURI: String)
GET /add/:className			controllers.samples.OntoPlay.process(className: String)
GET /check         			controllers.samples.OntoPlay.add(conditionJson: String, individualName:String)    


# Ontology configuration 
GET /uploadOntology  controllers.configuration.UploadController.showUploadPage()
POST /uploadOntology controllers.configuration.UploadController.upload()
#Annotations configuration
GET /annotation/configuration/show controllers.configuration.AnnotationController.showAnnotationCFPage()
GET /annotation/configuration/getAnnotations controllers.configuration.AnnotationController.getAnnotationForCFPage()
GET /annotation/configuration/getComponenets   controllers.configuration.AnnotationController.getOntologyComponents()
GET /annotation/configuration/getRelations/:annotationIri controllers.configuration.AnnotationController.getRelationsByAnnotationIri(annotationIri: String)
POST /annotation/configuration/addRelation 							controllers.configuration.AnnotationController.AddRelation()
POST /annotation/configuration/deleteRelation 							controllers.configuration.AnnotationController.deleteRelation()
POST /annotation/configuration/deleteAllRelations 							controllers.configuration.AnnotationController.deleteAllRelations()

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)

#properties
GET /properties/class/:className 		controllers.webservices.Properties.getPropertiesByClassName(className: String)
GET /properties/operators/:propertyUrl controllers.webservices.Operators.getOpertors(propertyUrl: String)

#annotations
GET /annotationProperties/get/:componentUri controllers.webservices.Annotations.getAnnotationPropertyByUri(componentUri: String)


#classes
GET /class/property/:propertyUri		controllers.webservices.Classes.getClassesByProperty(propertyUri: String)


#individuals
GET /individuals/class/:className controllers.webservices.Individuals.getIndividualsByClassName(className: String)
POST /individuals/save controllers.webservices.Individuals.addIndividual()
GET /individuals/update/:individualName controllers.webservices.Individuals.updateIndividual(individualName: String)